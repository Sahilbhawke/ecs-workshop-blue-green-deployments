name: Deploy to ECS (Blue-Green with N-1 Task Revision)

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'ECS Cluster Name'
        required: true
        default: 'bluegreen-cluster'  # You can provide a default or leave it empty
      service_name:
        description: 'ECS Service Name'
        required: true
        default: 'bluegreen-service'  # You can provide a default or leave it empty
      application_name:
        description: 'CodeDeploy Application Name'
        required: true
        default: 'bluegreen'
      deployment_group_name:
        description: 'CodeDeploy Deployment Group Name'
        required: true
        default: 'bluegreen'
      # deployment-id:
      #   description: 'Deployment ID for Rollback'
      #   required: true
      task_def_arn:
        description: 'Speicfy The Task-Def Arn'
        required: true
        default: 'arn:aws:ecs:us-east-1:222634373323:task-definition/nginx-sample:'

permissions:
  id-token: write  # Allow writing ID token for authentication
  contents: read   # Allow reading the contents of the repository

jobs:
  fetch_task_def:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: arn:aws:iam::222634373323:role/github-actions

    - name: Trigger Rollback with CodeDeploy
      run: |
        echo "Starting rollback to previous task definition: ${{ github.event.inputs.task_def_arn }}"

        # Create a new deployment using the previous task definition ARN
        REVISION_JSON="{\"version\": \"0.0\", \"Resources\": [{\"TargetService\": {\"Type\": \"AWS::ECS::Service\", \"Properties\": {\"ClusterName\": \"${{ github.event.inputs.cluster_name }}\", \"ServiceName\": \"${{ github.event.inputs.service_name }}\", \"TaskDefinition\": \"${{ github.event.inputs.task_def_arn }}\"}}}]}"

        aws deploy create-deployment \
          --application-name ${{ github.event.inputs.application_name }} \
          --deployment-group-name ${{ github.event.inputs.deployment_group_name }} \
          --revision revisionType=AppSpecContent,appSpecContent="$REVISION_JSON" \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --description "Rollback ECS service to previous revision" \
          --region ${{ secrets.AWS_REGION }}

    # - name: Rollback ECS Service to Previous Task Definition
    #   run: |
    #     echo "Rolling back ECS service to the previous task definition: ${{ github.event.inputs.task_def_arn }}"
        
    #     # Update the ECS service with the previous task definition ARN
    #     aws ecs update-service \
    #       --cluster ${{ github.event.inputs.cluster_name }} \
    #       --service ${{ github.event.inputs.service_name }} \
    #       --task-definition ${{ github.event.inputs.task_def_arn }} \
    #       --force-new-deployment \
    #       --region ${{ secrets.AWS_REGION }}

    # - name: Update ECS Service with N-1 Task Definition
    #   run: |
    #     # Update the ECS service with the previous task definition revision
    #     aws ecs update-service \
    #       --cluster ${{ github.event.inputs.cluster_name }} \
    #       --service ${{ github.event.inputs.service_name }} \
    #       --task-definition ${{ github.event.inputs.task_def_arn }} \
    #       --region ${{ secrets.AWS_REGION }}

    # - name: Trigger ECS Deployment via CodeDeploy
    #   run: |
    #     echo "Triggering a new deployment using AWS CodeDeploy..."
    #     DEPLOYMENT_GROUP_NAME="${{ github.event.inputs.deployment_group_name }}"
    #     APPLICATION_NAME="${{ github.event.inputs.application_name }}"
    #     TASK_DEFINITION_ARN="${{ github.event.inputs.task_def_arn }}"
    #     REVISION_JSON="{\"version\": \"0.0\", \"Resources\": [{\"TargetService\": {\"Type\": \"AWS::ECS::Service\", \"Properties\": {\"ClusterName\": \"${{ github.event.inputs.cluster-name }}\", \"ServiceName\": \"${{ github.event.inputs.service-name }}\", \"TaskDefinition\": \"${{ github.event.inputs.task_def_arn }}\"}}}]}"
    #     aws deploy create-deployment \
    #       --application-name $APPLICATION_NAME \
    #       --deployment-group-name $DEPLOYMENT_GROUP_NAME \
    #       --revision revisionType=AppSpecContent,appSpecContent="$REVISION_JSON" \
    #       --region ${{ secrets.AWS_REGION }}
    
    #     echo "Deployment triggered successfully using Task Definition ARN: ${{ github.event.inputs.task_def_arn }}"


    # - name: Monitor ECS Service Deployment
    #   run: |
    #     # Wait for the ECS service to stabilize with the new task definition
    #     SERVICE_NAME=${{ github.event.inputs.service_name }}
    #     CLUSTER_NAME=${{ github.event.inputs.cluster_name }}

    #     # Poll until the service reaches a stable state
    #     until [[ $(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].status" --output text) == "ACTIVE" ]]; do
    #       echo "Waiting for ECS service to stabilize..."
    #       sleep 30
    #     done
    #     echo "Deployment to ECS is stable and complete."
